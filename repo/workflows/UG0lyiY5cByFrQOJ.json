{
  "createdAt": "2025-07-17T13:25:08.860Z",
  "updatedAt": "2025-07-17T13:31:25.000Z",
  "id": "UG0lyiY5cByFrQOJ",
  "name": "My workflow 5",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "labelIds": []
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -1320,
        1080
      ],
      "id": "19b0dfee-f21c-4cc0-9b01-0bd61488cb7c",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "8K7svnKObXtCjlYA",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "90a8d974-a610-4372-9ed1-8f1c762c53fb",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "38e90d71-fb5a-4133-880c-96e957915224",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "d5d0a348-4f92-48b6-a19d-d18320fe84aa",
              "name": "subject",
              "value": "={{ $json.subject }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1100,
        840
      ],
      "id": "06ad4427-fdf8-4707-8b40-b8a977e5bb71",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -840,
        1280
      ],
      "id": "4552536e-1f0c-477a-b4ee-b0d8b1ec9754",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "aiULIRZ2iAOiSgth",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Title: {{ $json.subject }}\nEmail body: {{ $json.text }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=YOU ARE AN INTELLIGENT EMAIL ANALYZER SPECIALIZED IN DETECTING CREDIT CARD PAYMENT EMAILS.\nYOUR TASK IS TO ANALYZE THE CONTENT OF A GIVEN EMAIL AND DETERMINE IF IT IS RELATED TO A CREDIT CARD PAYMENT.\n\nINSTRUCTIONS\n1️⃣ CLASSIFY THE EMAIL INTO ONE OF THESE CONFIDENCE LEVELS:\n  -\"High\" – Clearly a credit card payment (e.g., transaction alert, payment confirmation).\n  -\"Medium\" – Possibly payment-related but not explicit (e.g., subscription renewals, account balance updates).\n  -\"Low\" – Not payment-related (e.g., marketing emails, security alerts, general banking updates).\n\n2️⃣ CONSIDER THE FOLLOWING FACTORS:\n  ✅ **Email Subject:** Does it mention “payment”, “transaction”, “due,” “charged,” or similar keywords?\n  ✅ **Email Body:** Does it confirm a transaction or mention a specific amount?\n  ✅ **Sender:** Is the email from a known bank or financial institution?\n\n3️⃣ RESPOND IN THE FOLLOWING JSON FORMAT:\n```json\n{\n  \"confidence\": \"high\" | \"medium\" | \"low\",\n  \"reason\": \"Detected keywords in subject & body\" | \"Sender is a bank\" | \"Does not match payment-related criteria\"\n}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -880,
        1060
      ],
      "id": "e49038bd-2a1f-4f7c-a001-b0f8784338ba",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"confidence\": {\n\t\t\t\"type\": \"string\",\n            \"enum\": [\"high\", \"low\"]\n\t\t},\n\t\t\"reason\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n  \"required\": [\"confidence\", \"reason\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -720,
        1280
      ],
      "id": "0590342a-18b0-4b27-9269-9b2be66d6885",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "409c9218-4558-4b05-b3ea-620c5be3574c",
              "leftValue": "={{ $json.output.confidence }}",
              "rightValue": "high",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "fc46f09d-75e4-4f2d-bd25-2f0b85b12b04",
              "leftValue": "={{ $json.output.confidence }}",
              "rightValue": "medium",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        1060
      ],
      "id": "9f272e97-860c-48d4-928e-729e99095353",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Edit Fields').item.json.id }}",
        "labelIds": [
          "Label_4395341220325084590"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -260,
        660
      ],
      "id": "915e5f61-9563-4c35-a40a-0a44cfd2b645",
      "name": "Add label to message",
      "webhookId": "e8f68b87-f8d3-4ca7-becd-62d84e9e34c3",
      "credentials": {
        "gmailOAuth2": {
          "id": "8K7svnKObXtCjlYA",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $('Edit Fields').item.json.text }}",
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payment_details\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"amount\": {\n          \"type\": \"string\",\n          \"description\": \"The payment amount\"\n        }\n      }\n    },\n    \"transaction_date\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"description\": \"The date the payment was made\"\n    },\n    \"merchant\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the merchant\"\n    },\n    \"payment_method\": {\n      \"type\": \"string\",\n      \"description\": \"The method of payment used\"\n    },\n    \"card_last_four\": {\n      \"type\": \"string\",\n      \"description\": \"The last 4 digits of the credit card used\"\n    }\n  },\n  \"required\": [\"amount\", \"transaction_date\", \"merchant\", \"payment_method\", \"card_last_four\"]\n}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        -260,
        940
      ],
      "id": "1aa2be21-69e6-494d-bc42-4276c92ad5ea",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -160,
        1180
      ],
      "id": "4314b5da-b6ea-4fa4-8c9d-65f73aaa8462",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "aiULIRZ2iAOiSgth",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -160,
        1340
      ],
      "id": "d646759c-49ef-4417-a69f-2ec4332dea8b",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1jiRk-WtZrcOdkganFx0RYKvI3F-JyM4ZPqjANlqzNyQ",
          "mode": "list",
          "cachedResultName": "Card Payment",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jiRk-WtZrcOdkganFx0RYKvI3F-JyM4ZPqjANlqzNyQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jiRk-WtZrcOdkganFx0RYKvI3F-JyM4ZPqjANlqzNyQ/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "payment_method": "={{ $json.output.payment_method }}",
            "card_last_four": "={{ $json.output.card_last_four }}",
            "merchant": "={{ $json.output.merchant }}",
            "transaction_date": "={{ $json.output.transaction_date }}",
            "amount ": "={{ $json.output.payment_details.amount }}"
          },
          "matchingColumns": [
            "amount "
          ],
          "schema": [
            {
              "id": "amount ",
              "displayName": "amount ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "transaction_date",
              "displayName": "transaction_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "merchant",
              "displayName": "merchant",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "card_last_four",
              "displayName": "card_last_four",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "payment_method",
              "displayName": "payment_method",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "justification",
              "displayName": "justification",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        240,
        1060
      ],
      "id": "4e5dd7c5-4ca8-4b79-b36a-ce14b62b3422",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "NwD5aE2o5zjQZOUS",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Card Transaction Details\n\nAmount:  {{ $json['amount '] }}\nTransaction Date: {{ $json.transaction_date }}\nMerchant: {{ $json.merchant }}\nPayment Method: {{ $json.payment_method }}\nCard Last Four Digits: {{ $json.card_last_four }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=📌 Overview\nYou are an AI-powered financial assistant responsible for:\n\nAnalyzing credit card transactions\nDetecting anomalies\nGathering merchant information\nProviding structured risk assessment\nYour job is to route tasks to the appropriate tools and format outputs properly for the Structured Output Parser.\n\n🛠 Tools & When to Use Them\n1️⃣ Pinecone Vector Store (Anomaly Detection)\nCompare the new transaction to historical spending.\nIdentify if the transaction is unusual compared to past patterns.\n\n2️⃣ Wikipedia Tool + SerpAPI (Merchant Lookup)\nIf a merchant is unknown, search Wikipedia first.\nIf no result is found, use SerpAPI to search the web.\nValidate if the merchant is a known business, subscription service, or fraudulent entity.\n\n3️⃣ Calculator (Math Operations)\nUse this tool for spending pattern calculations.\n\n🚦 Rules for Using Tools\n✅ Use Pinecone first to check if the transaction is anomalous.\n✅ Use Wikipedia for merchant search → if no result, use SerpAPI.\n✅ Ensure all outputs follow a structured format.\n\n🧪 Example Workflow\n📥 New Transaction Arrives\nInput: \"A $119.99 transaction from CANVA* I04417–839220 on 2025–02–04 was detected.\"*\nAction Taken:\n\nPinecone Vector Store → Check historical transactions.\nWikipedia Tool → Lookup merchant.\nSerpAPI (if Wikipedia fails) → Get merchant details.\nAI outputs structured JSON to Output Parser.\n\n⏰ Final Reminders\nToday’s Date & Time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        580,
        1060
      ],
      "id": "d0820b30-4a25-448a-802d-4169b7da03d0",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        560,
        1280
      ],
      "id": "1cd18dec-2ba3-4bdd-934e-6acbf0f437a9",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "aiULIRZ2iAOiSgth",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Work with you data in Pinecone Vector Store",
        "pineconeIndex": {
          "__rl": true,
          "value": "card-transactions",
          "mode": "list",
          "cachedResultName": "card-transactions"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        320,
        300
      ],
      "id": "2b6c748a-3fb5-4fda-b6cf-10ea1c545b0e",
      "name": "Pinecone Vector Store"
    },
    {
      "parameters": {
        "options": {
          "dimensions": 512
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        420,
        520
      ],
      "id": "22ce2215-ac0a-4739-9428-66bbc936a2ff",
      "name": "Embeddings OpenAI"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"risk_level\": \"Low | Medium | High\",\n  \"anomaly_summary\": \"Short, clear summary of why this transaction is unusual\",\n  \"merchant_info\": {\n    \"merchant_name\": \"Extracted Name\",\n    \"merchant_category\": \"Subscription | Retail | Dining | Other\",\n    \"source\": \"Wikipedia | SerpAPI | No Data Found\"\n  },\n  \"detailed_analysis\": {\n    \"amount\": \"$XXX.XX\",\n    \"transaction_date\": \"YYYY-MM-DD\",\n    \"merchant\": \"Merchant Name\",\n    \"payment_method\": \"Visa | Mastercard | Amex | Other\",\n    \"anomaly_reasons\": [\n      \"New merchant detected\",\n      \"Transaction amount is higher than usual\",\n      \"Uncommon category for this user\"\n    ]\n  },\n  \"recommendations\": [\n    {\n      \"options\": \"Verify transaction manually\",\n      \"action\": \"Check your Apple account for active subscriptions\"\n    },\n    {\n      \"options\": \"Report as fraud\",\n      \"action\": \"Contact Chase customer support\"\n    },\n    {\n      \"options\": \"Log transaction for future monitoring\",\n      \"action\": \"Store this in an external record\"\n    }\n  ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        800,
        1280
      ],
      "id": "32daa828-2ebf-4cb1-9e3d-b9165c33d0ed",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Gmail Trigger').item.json.id }}",
        "labelIds": [
          "Label_3144282303254007611"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1780,
        940
      ],
      "id": "162a6904-5308-44fe-aa18-a0ba5475c6dd",
      "name": "Add label to message2",
      "webhookId": "fd0d1e99-3ef5-4481-91dc-f4852bb2082f"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"verdict\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"safe\",\n        \"phishing\"\n      ]\n    }\n  },\n  \"required\": [\"verdict\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        320,
        1760
      ],
      "id": "80513ad9-c3ed-42fc-9f7e-a97c0f67d047",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        180,
        1760
      ],
      "id": "bff15b7f-b7c5-4ddc-a131-da9350d402d2",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "aiULIRZ2iAOiSgth",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Evaluate the safety of the following email.\n\nHere are the VirusTotal results for all URLs extracted from the email:\n\nURL 1:\n- Malicious: {{ $json.data.attributes.stats.malicious }}\n- Suspicious: {{ $json.data.attributes.stats.suspicious }}\n- Harmless: {{ $json.data.attributes.stats.harmless }}\n- Undetected: {{ $json.data.attributes.stats.undetected }}\n(Repeat for each URL)\n\nRespond only with:\n- \"safe\"\n- \"phishing\"",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a cybersecurity analyst AI. Your task is to evaluate if an email is phishing or safe based on VirusTotal scan results for all URLs found in the email. Be concise, objective, and prioritize detections labeled \"malicious\" or \"suspicious.\" If all URLs are clean, conclude that the email is likely safe. If any are malicious or suspicious, flag it as potentially phishing.\n"
        }
      },
      "id": "fc1b9ed8-4a70-4c77-900a-c25f5c867eee",
      "name": "Content Analysis",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        160,
        1540
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "curlImport": "",
        "httpVariantWarning": "",
        "method": "GET",
        "url": "=https://www.virustotal.com/api/v3/analyses/{{ $json.data.id }}",
        "": "",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "virusTotalApi",
        "provideSslCertificates": false,
        "sendQuery": true,
        "specifyQuery": "keypair",
        "queryParameters": {
          "parameters": [
            {
              "name": "resource",
              "value": "https://developers.virustotal.com/v2.0/reference/url-report"
            }
          ]
        },
        "sendHeaders": false,
        "sendBody": false,
        "options": {},
        "infoMessage": ""
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -160,
        1540
      ],
      "id": "b482e552-154d-4c3d-9ee5-a97919f1d5c0",
      "name": "VirusTotal HTTP Request1",
      "extendsCredential": "virusTotalApi",
      "credentials": {
        "virusTotalApi": {
          "id": "ivdSx6F0EjsBbWPN",
          "name": "VirusTotal account"
        }
      }
    },
    {
      "parameters": {
        "curlImport": "",
        "httpVariantWarning": "",
        "method": "POST",
        "url": "https://www.virustotal.com/api/v3/urls",
        "": "",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "virusTotalApi",
        "provideSslCertificates": false,
        "sendQuery": true,
        "specifyQuery": "keypair",
        "queryParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json.url }}"
            }
          ]
        },
        "sendHeaders": false,
        "sendBody": false,
        "options": {},
        "infoMessage": ""
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        1540
      ],
      "id": "5db172ef-d18d-4248-84d1-1368beaf6007",
      "name": "VirusTotal HTTP Request",
      "extendsCredential": "virusTotalApi",
      "credentials": {
        "virusTotalApi": {
          "id": "ivdSx6F0EjsBbWPN",
          "name": "VirusTotal account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.url }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "d50150d8-1bbd-4f21-ba2f-34a898a5835c",
      "name": "Has URL?",
      "type": "n8n-nodes-base.if",
      "position": [
        -800,
        1540
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Extract plain text and HTML\nconst text = $input.first().json.text || \"\";\nconst html = $input.first().json.textAsHtml || \"\";\n// Combine both sources\nconst content = `${text}\\n${html}`;\n\n// IOC Regexes\nconst urlRegex = /\\bhttps?:\\/\\/[^\\s<>\"')]+/gi;\nconst domainRegex = /\\b(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+(?:[a-z]{2,})\\b/gi;\nconst ipRegex = /\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/g;\nconst emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g;\n\n// Run regex matches\nconst urls = content.match(urlRegex) || [];\nconst domains = content.match(domainRegex) || [];\nconst ips = content.match(ipRegex) || [];\nconst emails = content.match(emailRegex) || [];\n\n// Deduplicate\nconst dedup = arr => [...new Set(arr)];\n\nconst results = [];\n\n// Structure like ioc-finder output\ndedup(urls).forEach(url => {\n  try {\n    results.push({ json: { type: \"url\", url, domain: new URL(url).hostname }});\n  } catch (_) {\n    results.push({ json: { type: \"url\", url }});\n  }\n});\ndedup(domains).forEach(domain => {\n  results.push({ json: { type: \"domain\", domain }});\n});\ndedup(ips).forEach(ip => {\n  results.push({ json: { type: \"ip\", ip }});\n});\ndedup(emails).forEach(email => {\n  results.push({ json: { type: \"email\", email }});\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1100,
        1540
      ],
      "id": "64c1180a-c6ee-4ca6-b6b2-de0dd8d1c863",
      "name": "Code",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "34b9aa63-89e5-4145-b769-fc75ea93fd13",
              "leftValue": "={{ $json.output.verdict }}",
              "rightValue": "phishing",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        680,
        1540
      ],
      "id": "e07e990d-8344-4c97-907e-6eac9384b093",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "57688b24-dff6-49eb-a9b8-afd7bcf83734",
              "leftValue": "={{ $json.output.risk_level }}",
              "rightValue": "=Low",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1020,
        1060
      ],
      "id": "241116cf-11ab-41b4-980d-9bcca8e9ef59",
      "name": "If2"
    },
    {
      "parameters": {
        "sendTo": "harrychandratsjan@gmail.com",
        "subject": "Summary",
        "message": "={{ $json.data[1].output }}",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [
              {
                "property": "=data"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2540,
        1080
      ],
      "id": "e457255d-cbd4-458b-b5fc-3a5d21698464",
      "name": "Send a message",
      "webhookId": "5bdefda4-0f66-44e2-9789-2efdfb683336",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1240,
        1340
      ],
      "id": "dec74480-f2a0-4daf-83bf-4f0bd17d219b",
      "name": "Merge",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1460,
        1340
      ],
      "id": "0b3e2221-f204-4de7-a118-6833f36fd992",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "path": "detection"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 2,
      "position": [
        560,
        60
      ],
      "id": "fa1d24fa-ccdd-43b9-b1bb-4d013d8cfacf",
      "name": "MCP Server Trigger",
      "webhookId": "aef59f5e-253b-49ea-9187-a4bf1e02d709"
    },
    {
      "parameters": {
        "sseEndpoint": "https://harryzxc.app.n8n.cloud/mcp/detection"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        680,
        1280
      ],
      "id": "537d6e77-976f-4de4-aaea-98b385e30490",
      "name": "MCP Client"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        640,
        300
      ],
      "id": "f581eab7-65cb-41a6-a7c1-fb5ad8992f9e",
      "name": "SerpAPI1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "typeVersion": 1,
      "position": [
        780,
        300
      ],
      "id": "9214d62d-44df-416d-94d8-402ebbf6eba5",
      "name": "Wikipedia1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "id": "a42459a2-1c15-4371-a898-752596919b85",
      "name": "Calculator1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1680,
        1500
      ],
      "id": "61241e39-e4f4-4f31-9504-16298cdb4e9a",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1660,
        1740
      ],
      "id": "0805e69c-e2e5-481a-948e-2c5eb4d25547",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "aiULIRZ2iAOiSgth",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const seen = new Set();\nconst unique = [];\n\nfor (const item of items) {\n  const verdict = item.json.output?.verdict;\n  if (!seen.has(verdict)) {\n    seen.add(verdict);\n    unique.push(item);\n  }\n}\n\nreturn unique;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        1540
      ],
      "id": "d049c310-bb70-4d03-b6be-7a578bd94912",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "text",
        "options": {
          "fileName": "emailBody.txt"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1240,
        620
      ],
      "id": "7d173a82-97b4-476c-a726-32ab0b26a925",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://hcti.io/v1/image",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "html",
              "value": "={{ $('Edit Fields').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "757bc3cc-08b8-4c3d-a8c7-06edbae3029e",
      "name": "Screenshot HTML",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1460,
        620
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "id": "c63c295a-7028-4015-8cd3-52914898dd7b",
      "name": "Retrieve Screenshot",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1780,
        620
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2080,
        1080
      ],
      "id": "ad0ea7f9-fded-4159-97e1-061aaf779880",
      "name": "Merge1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {
          "includeBinaries": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2320,
        1080
      ],
      "id": "457dc0a2-9827-40b9-b4f6-7ec5da96689d",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2660,
        1220
      ],
      "id": "b8286e14-35f5-432e-af1c-02560d68fc7c",
      "name": "Code2"
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Add label to message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Analysis": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Content Analysis",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Content Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "VirusTotal HTTP Request1": {
      "main": [
        [
          {
            "node": "Content Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VirusTotal HTTP Request": {
      "main": [
        [
          {
            "node": "VirusTotal HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has URL?": {
      "main": [
        [
          {
            "node": "VirusTotal HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Has URL?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Add label to message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI1": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia1": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator1": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Screenshot HTML": {
      "main": [
        [
          {
            "node": "Retrieve Screenshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Screenshot HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve Screenshot": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "Content Analysis": [
      {
        "json": {
          "output": {
            "verdict": "phishing"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "phishing"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      },
      {
        "json": {
          "output": {
            "verdict": "safe"
          }
        }
      }
    ],
    "Aggregate": [
      {
        "json": {
          "data": [
            {
              "output": {
                "risk_level": "Low",
                "anomaly_summary": "Transaction value is considerably lower than previous transactions with Apple, which typically range in the hundreds.",
                "merchant_info": {
                  "merchant_name": "Apple",
                  "merchant_category": "Electronics/Software",
                  "source": "Wikipedia and SerpAPI search"
                },
                "detailed_analysis": {
                  "amount": "RM 3.90",
                  "transaction_date": "2025-07-12",
                  "merchant": "Apple",
                  "payment_method": "Touch ‘n Go eWallet 601****6188",
                  "anomaly_reasons": [
                    "Low transaction amount compared to historical transactions with Apple"
                  ]
                },
                "recommendations": [
                  {
                    "options": "Continue monitoring transactions with Apple for unusual patterns.",
                    "action": "No action required at this time."
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  },
  "versionId": "ccb42b4c-d94f-43fb-958e-9809be62e6fe",
  "triggerCount": 0,
  "tags": []
}